{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\devan\\\\Desktop\\\\share project\\\\dstorage-starter_code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\devan\\\\Desktop\\\\share project\\\\dstorage-starter_code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\devan\\\\Desktop\\\\share project\\\\dstorage-starter_code\\\\src\\\\components\\\\App.js\";\nimport Storage from '../abis/Storage.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css';\nimport { create as IPFSHTTPClient } from 'ipfs-http-client';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar projectId = '2Fd0PqxApihyfvP6wLGk4ayF8cy';\nvar projectSecret = '53b27a2717c1b7e4fc5f578959cfdab0';\nvar auth = 'Basic ' + Buffer.from(projectId + \":\" + projectSecret).toString('base64');\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: auth\n  }\n});\n/*const client=IPFSHTTPClient({\n  host:'ipfs.infura.io',\n  port:5001,\n  protocol:'https',\n  \n}) */\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying Metamask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, storage, filesCount, i, file;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3;\n              console.log(web3); //Load account\n\n              _context3.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              });\n\n              _context3.next = 8;\n              return web3.eth.net.getId();\n\n            case 8:\n              networkId = _context3.sent;\n              networkData = Storage.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 28;\n                break;\n              }\n\n              // Assign contract\n              storage = new web3.eth.Contract(Storage.abi, contractAddress);\n\n              _this2.setState({\n                storage\n              }); // Get files amount\n\n\n              _context3.next = 15;\n              return storage.methods.fileCount().call();\n\n            case 15:\n              filesCount = _context3.sent;\n\n              _this2.setState({\n                filesCount\n              }); // Load files&sort by the newest\n\n\n              i = filesCount;\n\n            case 18:\n              if (!(i >= 1)) {\n                _context3.next = 26;\n                break;\n              }\n\n              _context3.next = 21;\n              return storage.methods.files(i).call();\n\n            case 21:\n              file = _context3.sent;\n\n              _this2.setState({\n                files: [..._this2.state.files, file]\n              });\n\n            case 23:\n              i--;\n              _context3.next = 18;\n              break;\n\n            case 26:\n              _context3.next = 29;\n              break;\n\n            case 28:\n              window.alert('Storage contract not deployed to detected network.');\n\n            case 29:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } // Get file from user\n\n\n  //Set states\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadFile = description => {\n      console.log(\"Submitting file to IPFS...\"); //Add file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('IPFS result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n\n        if (this.state.type === '') {\n          this.setState({\n            type: 'none'\n          });\n        }\n\n        this.state.storage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n          window.location.reload();\n        }).on('error', e => {\n          window.alert('Error');\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      storage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }; //Bind functions\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      files: this.state.files,\n      captureFile: this.captureFile,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/devan/Desktop/share project/dstorage-starter_code/src/components/App.js"],"names":["Storage","React","Component","Navbar","Main","Web3","create","IPFSHTTPClient","ipfsClient","require","projectId","projectSecret","auth","Buffer","from","toString","ipfs","host","port","protocol","headers","authorization","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","console","log","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","storage","Contract","abi","contractAddress","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","result","type","name","uploadFile","description","add","error","loading","hash","size","send","on","location","reload","e","render"],"mappings":"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","sourcesContent":["import Storage from '../abis/Storage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\nimport {create as IPFSHTTPClient} from 'ipfs-http-client';\n\nconst ipfsClient=require('ipfs-http-client')\n\nconst projectId='2Fd0PqxApihyfvP6wLGk4ayF8cy'\nconst projectSecret='53b27a2717c1b7e4fc5f578959cfdab0'\nconst auth= 'Basic ' + Buffer.from(projectId + \":\" + projectSecret).toString('base64')\nconst ipfs = ipfsClient({host:'ipfs.infura.io',port:5001,protocol:'https',headers:{\n  authorization: auth\n}})\n/*const client=IPFSHTTPClient({\n  host:'ipfs.infura.io',\n  port:5001,\n  protocol:'https',\n  \n}) */\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum){\n      window.web3=new Web3(window.ethereum)\n      await window.ethereum.enable() \n    }\n    else if (window.web3){\n      window.web3=new Web3(window.web3.currentProvider)\n    }\n    else{\n      window.alert('Non-Ethereum browser detected. You should consider trying Metamask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 =window.web3;\n    console.log(web3)\n\n    //Load account\n    const accounts= await web3.eth.getAccounts()\n    this.setState({account:accounts[0]})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = Storage.networks[networkId]\n    if(networkData) {\n      // Assign contract\n      const storage = new web3.eth.Contract(Storage.abi,contractAddress);\n      this.setState({ storage })\n      // Get files amount\n      const filesCount = await storage.methods.fileCount().call()\n      this.setState({ filesCount })\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await storage.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('Storage contract not deployed to detected network.')\n    }\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n\n  //Upload File\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n    //Add file to the IPFS\n    ipfs.add(this.state.buffer,(error, result)=>{\n      console.log('IPFS result', result)\n      if(error)\n      {\n        console.error(error)\n        return \n      }\n      this.setState({loading:true})\n\n      if(this.state.type===''){\n        this.setState({type:'none'})\n      }\n      this.state.storage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n      account:'',\n      storage: null,\n      files:[],\n      loading: false,\n      type: null,\n      name: null\n      \n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}